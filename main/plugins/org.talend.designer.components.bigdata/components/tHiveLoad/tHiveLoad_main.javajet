<%@ jet 
imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.MappingTypeRetriever
		org.talend.core.model.metadata.MetadataTalendType
		org.talend.designer.runprocess.ProcessorException
		org.talend.designer.runprocess.ProcessorUtilities
		java.util.List	
		java.util.Map
		java.util.Set
		java.util.HashSet
		" 
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/Log4jDBConnUtil.javajet"%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	final String cid = node.getUniqueName();
	String processId = node.getProcess().getId();
	
	String dbhost = ElementParameterParser.getValue(node, "__HOST__");
	String dbport = ElementParameterParser.getValue(node, "__PORT__");
	String dbname= ElementParameterParser.getValue(node, "__DBNAME__");
	String dbuser= ElementParameterParser.getValue(node, "__USER__");

	
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	boolean isExecutedThroughWebHCat = "MICROSOFT_HD_INSIGHT".equals(ElementParameterParser.getValue(node, "__DISTRIBUTION__"));
	if(isExecutedThroughWebHCat) {
%>
		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Hive/GetAzureConnection.javajet"%>
<%
	} else {
%>
		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Hive/GetConnection.javajet"%>
<%
	}
	
	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");

	String loadAction = ElementParameterParser.getValue(node, "__LOAD_ACTION__");
	boolean local = "true".equals(ElementParameterParser.getValue(node, "__LOCAL__"));
	String path = ElementParameterParser.getValue(node, "__FILEPATH__");
	String fileAction = ElementParameterParser.getValue(node, "__FILE_ACTION__");
	String tablename = ElementParameterParser.getValue(node, "__TABLE__");
	boolean setPartition = "true".equals(ElementParameterParser.getValue(node, "__SET_PARTITIONS__"));
	String partition = ElementParameterParser.getValue(node, "__PARTITION__");
	String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	
	boolean useExistingConnection = "true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));

	String distribution = ElementParameterParser.getValue(node, "__DISTRIBUTION__");
	String hiveVersion = ElementParameterParser.getValue(node, "__HIVE_VERSION__");
	boolean isCustom = "CUSTOM".equals(ElementParameterParser.getValue(node, "__DISTRIBUTION__"));
	String connectionMode = ElementParameterParser.getValue(node, "__CONNECTION_MODE__");
	boolean setFsDefaultName = "true".equals(ElementParameterParser.getValue(node, "__SET_FS_DEFAULT_NAME__"));
	String fsDefaultName = ElementParameterParser.getValue(node, "__FS_DEFAULT_NAME__");
	
	if(useExistingConnection) {
		distribution = "";
		hiveVersion = "";
		connectionMode = "";
		setFsDefaultName = false;
		fsDefaultName = "";
		String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
		for (INode pNode : node.getProcess().getNodesOfType("tHiveConnection")) {
			if(connection!=null && connection.equals(pNode.getUniqueName())) {
				distribution = ElementParameterParser.getValue(pNode, "__DISTRIBUTION__");
				hiveVersion = ElementParameterParser.getValue(pNode, "__HIVE_VERSION__");
				connectionMode = ElementParameterParser.getValue(pNode, "__CONNECTION_MODE__");
				setFsDefaultName = "true".equals(ElementParameterParser.getValue(pNode, "__SET_FS_DEFAULT_NAME__"));
				fsDefaultName = ElementParameterParser.getValue(pNode, "__FS_DEFAULT_NAME__");
				break;
			}
		}
	}
	
	// Register jars to handle the parquet format.
	
	boolean targetTableUsesParquetFormat = "true".equals(ElementParameterParser.getValue(node, "__TARGET_TABLE_IS_A_PARQUET_TABLE__"));
	boolean generateAddJarCodeForAll = targetTableUsesParquetFormat;
		
	if(targetTableUsesParquetFormat) {
		String compression = ElementParameterParser.getValue(node, "__PARQUET_COMPRESSION__");
		java.util.List<String> jarsToRegister = null;
		java.util.List<String> jars = null;
		if(generateAddJarCodeForAll) {
			String[] commandLine = new String[] {"<command>"};
			try {
				commandLine = ProcessorUtilities.getCommandLine("win32",true, processId, "",org.talend.designer.runprocess.IProcessor.NO_STATISTICS,org.talend.designer.runprocess.IProcessor.NO_TRACES, new String[]{});
			} catch (ProcessorException e) {
				e.printStackTrace();
			}
	
			jarsToRegister = new java.util.ArrayList();
			
			jarsToRegister.add("snappy-java");
			jarsToRegister.add("parquet-hive-bundle");
	
			for (int j = 0; j < commandLine.length; j++) {
				if(commandLine[j].contains("jar")) {
					jars = java.util.Arrays.asList(commandLine[j].split(";"));
					break;
				}
			}
		}
		
		if(jarsToRegister!=null && jars!=null) {
			if("EMBEDDED".equalsIgnoreCase(connectionMode) || isExecutedThroughWebHCat) {
%>
				<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/GetJarsToRegister.javajet"%>	
				GetJarsToRegister_<%=cid%> getJarsToRegister_<%=cid %> = new GetJarsToRegister_<%=cid%>();
<%
			} else {
				generateAddJarCodeForAll = false;
				if(setFsDefaultName) {
					generateAddJarCodeForAll = true;
%>
					<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Hive/GetHiveJarsToRegister.javajet"%>
					GetHiveJarsToRegister_<%=cid%> getJarsToRegister_<%=cid %> = new GetHiveJarsToRegister_<%=cid%>();
<%
				}		
			}
			
			if(generateAddJarCodeForAll) {
				if(!isExecutedThroughWebHCat) { // Then we create a SQL statement to add the jars.
%>
					java.sql.Statement addJar_<%=cid%> = null;
<%
				}
				
				for(int i=0; i<jarsToRegister.size(); i++) {
					String jarToRegister = jarsToRegister.get(i);
					for(int j=0; j<jars.size(); j++) {
						if(jars.get(j).contains(jarToRegister)) {
							if(!isExecutedThroughWebHCat) { // Then we use the created SQL statement to add the jars.
%>
								addJar_<%=cid%> = conn_<%=cid%>.createStatement();
								try {
									addJar_<%=cid%>.execute("add jar " + getJarsToRegister_<%=cid %>.replaceJarPaths("<%=jars.get(j)%>"));
								} catch (Exception e) {
									e.printStackTrace();
								} finally {
									addJar_<%=cid%>.close();
								}
<%
							} else {
%>
								bw_<%=cid%>.write("ADD JAR " + wasbPath_<%=cid%> + new java.io.File(getJarsToRegister_<%=cid %>.replaceJarPaths("<%=jars.get(j)%>")).getName() + ";");
								libjars_<%=cid%>.append(getJarsToRegister_<%=cid %>.replaceJarPaths("<%=jars.get(j)%>") + ",");
<%
							}
						}
					}
				}
			}
		}
		
		// End of parquet format handling.
		
		if(!isExecutedThroughWebHCat) {
%>
			java.sql.Statement setCompression_<%=cid%> = conn_<%=cid%>.createStatement();
			try {
				setCompression_<%=cid%>.execute("SET parquet.compression=<%=compression%>");
			} finally {
				setCompression_<%=cid%>.close();
			}
<%
		} else {
%>
			bw_<%=cid%>.write("SET parquet.compression=<%=compression%>;");
<%
		}
	}
	
	StringBuilder createTableSQL = new StringBuilder();
	
	if("LOAD".equals(loadAction)) {
		createTableSQL.append("LOAD DATA ");
		if(local) {
			createTableSQL.append("LOCAL ");
		}
		createTableSQL.append("INPATH '");
%>
		String path_<%=cid%> = <%=path%>;
<%
    	createTableSQL.append("\" + ");
    	createTableSQL.append("path_");
    	createTableSQL.append(cid);
    	createTableSQL.append(" + \"'");
    	
    	if("OVERWRITE".equals(fileAction)) {
    		createTableSQL.append(" OVERWRITE ");
    	}
    	createTableSQL.append(" INTO TABLE ");
%>
		String tablename_<%=cid%> = <%=tablename%>;
<%
    	createTableSQL.append("\" + ");
    	createTableSQL.append("tablename_");
    	createTableSQL.append(cid);
    	createTableSQL.append(" + \"");
    	
    	if(setPartition) {
    		createTableSQL.append(" PARTITION (");
%>
			String partition_<%=cid%> = <%=partition%>;
<%
	    	createTableSQL.append("\" + ");
        	createTableSQL.append("partition_");
        	createTableSQL.append(cid);
        	createTableSQL.append(" + \"");
    		createTableSQL.append(")");
    	}
	} else if("INSERT".equals(loadAction)) {
		createTableSQL.append("INSERT ");
		
		String targetType = ElementParameterParser.getValue(node, "__TARGET__");
		String query = ElementParameterParser.getValue(node, "__QUERY__");
		query = query.replaceAll("\n"," ");
		query = query.replaceAll("\r"," ");
		
		if("TABLE".equals(targetType)) {
			boolean createIfNotExist = "true".equals(ElementParameterParser.getValue(node, "__CREATE_IF_NOT_EXIST__"));
			
			if("OVERWRITE".equals(fileAction)) {
				createTableSQL.append("OVERWRITE ");
			} else if("APPEND".equals(fileAction)) {
				createTableSQL.append("INTO ");
			}
			createTableSQL.append("TABLE ");
%>
			String tablename_<%=cid%> = <%=tablename%>;
<%
	    	createTableSQL.append("\" + ");
        	createTableSQL.append("tablename_");
        	createTableSQL.append(cid);
        	createTableSQL.append(" + \" ");
        	
    		if(setPartition) {
    			createTableSQL.append(" PARTITION (");
%>
				String partition_<%=cid%> = <%=partition%>;
<%
    	    	createTableSQL.append("\" + ");
            	createTableSQL.append("partition_");
            	createTableSQL.append(cid);
            	createTableSQL.append(" + \"");
        		createTableSQL.append(") ");
        		
        		if(createIfNotExist) {
        			createTableSQL.append(" IF NOT EXISTS ");
        		}
    		}
		} else if("DIRECTORY".equals(targetType)) {
			createTableSQL.append("OVERWRITE ");
			
			if(local) {
				createTableSQL.append("LOCAL ");
			}
			
			createTableSQL.append("DIRECTORY '");
%>
			String path_<%=cid%> = <%=path%>;
<%
	    	createTableSQL.append("\" + ");
        	createTableSQL.append("path_");
        	createTableSQL.append(cid);
        	createTableSQL.append(" + \"' ");
		}
%>
		String query_<%=cid%> = <%=query%>;
<%
    	createTableSQL.append("\" + ");
    	createTableSQL.append("query_");
    	createTableSQL.append(cid);
    	createTableSQL.append(" + \"");
	}
%>

	String querySQL_<%=cid %> = "<%=createTableSQL.toString()%>";
	
<%
	if(!isExecutedThroughWebHCat) {
%>	
	
		java.sql.Statement stmt_<%=cid %> = conn_<%=cid %>.createStatement();
	
		try {
			stmt_<%=cid%>.execute(querySQL_<%=cid %>);
		} catch(java.sql.SQLException e_<%=cid%>) {
		    <%if(("true").equals(dieOnError)) {
		    %>
		    	throw(e_<%=cid%>);
		    <%
		    }else {
		    %> 
		    	System.err.println(e_<%=cid%>.getMessage());
		    <%
		    }%>
		}
		stmt_<%=cid %>.close();	
		<%if(!("true").equals(useExistingConn)) {%>
			conn_<%=cid %>.close();
		<%}%>
		globalMap.put("<%=cid%>_QUERY", querySQL_<%=cid %>);
	
		String currentClientPathSeparator_<%=cid%> = (String)globalMap.get("current_client_path_separator");
		if(currentClientPathSeparator_<%=cid%>!=null) {
			System.setProperty("path.separator", currentClientPathSeparator_<%=cid%>);
			globalMap.put("current_client_path_separator", null);
		}
		
		String currentClientUsername_<%=cid%> = (String)globalMap.get("current_client_user_name");
		if(currentClientUsername_<%=cid%>!=null) {
			System.setProperty("user.name", currentClientUsername_<%=cid%>);
			globalMap.put("current_client_user_name", null);
		}
		
		String originalHadoopUsername_<%=cid%> = (String)globalMap.get("HADOOP_USER_NAME_<%=cid%>");
		if(originalHadoopUsername_<%=cid%>!=null) {
			System.setProperty("HADOOP_USER_NAME", originalHadoopUsername_<%=cid%>);
			globalMap.put("HADOOP_USER_NAME_<%=cid%>", null);
		} else {
			System.clearProperty("HADOOP_USER_NAME");
		}
<%
	} else {
%>
		bw_<%=cid%>.write(querySQL_<%=cid %> + ";");
		globalMap.put("<%=cid%>_QUERY", querySQL_<%=cid %>);
		
		bw_<%=cid%>.close();

		if(libjars_<%=cid%>.length() > 0) {
			instance_<%=cid%>.setLibJars(libjars_<%=cid%>.toString().substring(0, libjars_<%=cid%>.length()-1));
		}
		instance_<%=cid%>.sendFiles();
		instance_<%=cid%>.callWS(null, true);
		int exitCode_<%=cid%> = instance_<%=cid%>.execute();
		if(exitCode_<%=cid%> > 0) {
		
<%
			if(("true").equals(dieOnError)) {
%>
				throw new Exception("The Hive job failed. Please read the logs for more details");
<%
			} else {
%>
				System.err.println("The Hive job failed. Please read the logs for more details");
<%
				if(isLog4jEnabled) {
%>
					log.error("<%=cid%> - " + e.getMessage());
<%
				}
			}
%>
		}
<%
	}
%>