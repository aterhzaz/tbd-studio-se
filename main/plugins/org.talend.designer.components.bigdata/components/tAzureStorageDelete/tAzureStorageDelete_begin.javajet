<%@ jet 
	imports="
	    org.talend.core.model.process.INode 
	    org.talend.core.model.process.ElementParameterParser 
	    org.talend.designer.codegen.config.CodeGeneratorArgument
	    java.util.List
	    java.util.Map
	" 
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();

	String cid = node.getUniqueName();
	boolean useExistingConnection = "true".equals(ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__"));
	String accountName = ElementParameterParser.getValue(node, "__ACCESS_KEY__");
	String accountSecret = ElementParameterParser.getValue(node, "__SECRET_KEY__");
	String protocol = ElementParameterParser.getValue(node, "__PROTOCOL__");
	
	String container = ElementParameterParser.getValue(node, "__CONTAINER__");
	List<Map<String, String>> remoteBlobs = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__REMOTE_BLOBS__");
	boolean dieOnError = "true".equals(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
	
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	
%>
	try {
<%
		if(useExistingConnection) {
			String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
%>
			com.microsoft.windowsazure.services.core.storage.CloudStorageAccount myAzureStorageAccount_<%=cid%> = (com.microsoft.windowsazure.services.core.storage.CloudStorageAccount)globalMap.get("connection_" + "<%=connection%>");
<%
			if(isLog4jEnabled) {
%>
			log.info("<%=cid%> - get existed cloud storage account object from <%=connection%>.");
<%
			}
		} else {
%>
			String myAzureStorageConn_<%=cid%> = "DefaultEndpointsProtocol=<%=protocol.toLowerCase()%>;" + "AccountName=" + <%=accountName%> + ";" + "AccountKey=" + <%=accountSecret%>;
			// Retrieve storage account from connection-string
			com.microsoft.windowsazure.services.core.storage.CloudStorageAccount myAzureStorageAccount_<%=cid%> = com.microsoft.windowsazure.services.core.storage.CloudStorageAccount.parse(myAzureStorageConn_<%=cid%>);
<%
			if(isLog4jEnabled) {
%>
			log.info("<%=cid%> - Success to create cloud storage account object.");
<%
			}
%>
			globalMap.put("<%=cid%>_ACCOUNT_NAME", <%=accountName%>);
			globalMap.put("<%=cid%>_ACCOUNT_KEY", <%=accountSecret%>);
<%
		}
%>
		// Create the blob client
		com.microsoft.windowsazure.services.blob.client.CloudBlobClient blobClient_<%=cid%> = myAzureStorageAccount_<%=cid%>.createCloudBlobClient();

		// Retrieve reference to a previously created container
		com.microsoft.windowsazure.services.blob.client.CloudBlobContainer container_<%=cid%> = blobClient_<%=cid%>.getContainerReference(<%=container%>);
<%
		for(int i=0;i<remoteBlobs.size();i++){
			Map<String, String> map=remoteBlobs.get(i);
			String blobs = map.get("PREFIX");
			boolean includeSubdirectories = "true".equals(map.get("INCLUDE"));
%>
			for (com.microsoft.windowsazure.services.blob.client.ListBlobItem blobItem_<%=cid%> : container_<%=cid%>.listBlobs(<%=blobs%>, <%=includeSubdirectories%>, null, null, null)) {
				if (blobItem_<%=cid%> instanceof com.microsoft.windowsazure.services.blob.client.CloudBlob) {
					com.microsoft.windowsazure.services.blob.client.CloudBlob blob_<%=cid%> = (com.microsoft.windowsazure.services.blob.client.CloudBlob) blobItem_<%=cid%>;
					blob_<%=cid%>.delete();
				}
			}
<%
		}
%>
			    	
		globalMap.put("<%=cid%>_CONTAINER", <%=container%>);
	} catch (java.lang.Exception e_<%=cid%>) {
<%
		if(dieOnError) {
%>
			throw e_<%=cid%>;
<%
		} else {
			if(isLog4jEnabled) {
%>
			log.error("<%=cid%> - " + e_<%=cid%>.getMessage());
<%
			}
%>
			System.err.println(e_<%=cid%>.getMessage());
<%
		}
%>
	}
